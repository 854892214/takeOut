<template>
  <div id="address-detail">
    <common-header
      :back-handler="back"
      :option="headerOption"
      @save="save"
      :title="this.$route.query.editType === 'add' ? '新增地址' : '修改地址'"></common-header>
    <div class="wrapper" ref="wrapper">
      <div class="content">
        <div class="maps">
          <div id="map"></div>
          <div class="autocompleteInput">
            <input type="text" id="autocomplete" placeholder="请输入地点，如不准确，请移动地图"/>
          </div>
          <div class="location">
            <img src="https://bb.waimaipu.cn/xshop/address/static/location.svg"/>
          </div>
          <div class="locIcon">
            <img src="https://bb.waimaipu.cn/xshop/address/static/locIcon.png"/>
          </div>
        </div>
        <div class="input-item">
          <div>联系人</div>
          <input type="text" placeholder="请输入您的姓名" v-model="addressInfo.name">
        </div>
        <div class="input-item">
          <div>手机号:</div>
          <input type="text" placeholder="请输入您的电话" v-model="addressInfo.mobile">
        </div>
        <div class="input-item">
          <div>定位地址:</div>
          <input type="text" v-model="address" readonly="readonly">
        </div>
        <div class="input-item">
          <div>门牌号:</div>
          <input type="text" placeholder="请输入门牌号" v-model="houseNumber">
        </div>
      </div>
    </div>

    <loading v-if="isLoading" type="inPage" height="calc(100vh - 44px)" top="44px"></loading>
  </div>
</template>

<script>
  import CommonHeader from "../../components/CommonHeader";
  import httpClient from '../../http';
  import Loading from "../../components/Loading";
  import {
    Indicator
  } from "mint-ui";

  export default {
    name: "AddressDetail",
    components: {Loading, CommonHeader},
    data: function () {
      return {
        addressInfo: {
          name: '',
          mobile: '',
          address: '',
          latitude: '',
          longitude: '',
        },
        isLoading: false,
        headerOption: [{
          icon: '#icon-baocun',
          title: '保存',
          handler: "save"
        }],
        autocomplete: {},
        houseNumber: '',
        address: '',
        position: {},
        map: {},
      }
    },
    methods: {
      back() {
        let location = {
          path: '/addressList',
          name: 'AddressList',
          query: {
            path: this.$route.query.path,
            tip : this.$route.query.tip,
          }
        };
        this.$router.replace(location)
      },
      go2start() {

      },
      save() {
        // console.log(this.addressInfo);
        // console.log(this.address);
        // console.log(this.position)
        if (this.addressInfo.name === '') {
          this.$danMessageBox("请输入联系人姓名", function () {
          }, true);
          return;
        }
        if (this.addressInfo.phone === '') {
          this.$danMessageBox("请输入手机号码", function () {
          }, true);
          return;
        }
        if (this.addressInfo.mobile.length <= 5) {
          this.$danMessageBox("手机号码格式不正确", function () {
          }, true);
          return false;
        }
        if (this.address === '') {
          this.$danMessageBox("地理位置信息未获取", function () {
          }, true);
          return;
        }
        if (this.houseNumber === '') {
          this.$danMessageBox("请输入您的门牌号", function () {
          }, true);
          return;
        }
        this.addressInfo.address = this.address + " " + this.houseNumber;
        this.addressInfo.latitude = this.position.lat;
        this.addressInfo.longitude = this.position.lng;

        if (this.$route.query.editType === 'add') {
          Indicator.open({text: "正在添加...", spinnerType: "fading-circle"});
          httpClient.addAddress(this.$store.getters.storeScanGoodsUser.id, this.addressInfo)
            .then((result) => {
              Indicator.close();
              if (result.data.result_code === "ok" && result.data.result_msg === "SUCCESS") {
                this.$router.replace({
                  path: '/addressList',
                  query: {
                    path: this.$route.query.path,
                    tip : this.$route.query.tip,
                  }
                });
              } else {
                if (result.data.result_msg === "SYSTEM_ERROR") {
                  this.$danMessageBox("系统错误");
                }
              }
            })
          //根据URL传来的字符判定Save按钮将进入的方法
        }else if(this.$route.query.editType === 'edit'){
          console.log(this.addressInfo);
          //let updaddressInfo = this.addressInfo;
          //this.$delete(updaddressInfo,'latitude');
          //this.$delete(updaddressInfo,'longitude');
          // let updaddressInfo = {
          //   name: this.addressInfo.name,
          //   mobile: this.addressInfo.mobile,
          //   address: this.address + " " + this.houseNumber
          // }
          //console.log(updaddressInfo);
          Indicator.open({text: "正在修改...", spinnerType: "fading-circle"});
          //执行修改方法，成功则返回至列表页
          httpClient.updateAddress(this.$route.query.id,this.addressInfo).then((result) => {
            console.log(result);
            if(result.data.result_code === "ok" && result.data.result_msg === "SUCCESS" ){
              this.$router.replace({
                path : '/addressList',
                query : {
                  path : this.$route.query.path
                }
              })
              Indicator.close();
            }else {
              console.log("++++++修改时出现错误+++++++")
            }
          })
        }
      },
      mapInit(pos) {
        //判断是否支持 获取本地位置
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(this.showMap);
        } else {
          this.$danMessageBox("获取gps失败", Object, true);
        }
      },
      showMap(position) {

        let pos = {
          lat: position.coords.latitude,
          lng: position.coords.longitude
        };
        this.showPosition(pos);
      },
      showPosition(pos) {
        let that = this;
        this.gps2address(pos);
        this.map = new google.maps.Map(document.getElementById("map"), {
          zoom: 19,
          center: pos,
          zoomControl: true,
          gestureHandling: 'greedy'
        });

        google.maps.event.addListener(this.map, 'dragend', function (event) {
          let center = that.map.getCenter();
          let gps = center.toString().replace('(', '').replace(')', '').split(',');
          let myLatLng2 = {lat: gps[0] * 1, lng: gps[1] * 1};
          that.gps2address(myLatLng2);
        });
      },
      initAutocomplete() {
        let that = this;
        this.autocomplete = new google.maps.places.Autocomplete(
          (document.getElementById('autocomplete')),
          {types: ['geocode']});
        this.autocomplete.addListener('place_changed', function () {
          let place = that.autocomplete.getPlace();
          if (!place.geometry.location) {
            return;
          }
          let gps = [place.geometry.location.lat(), place.geometry.location.lng()];
          console.log("搜索", gps);
          ///that.showPosition(gps[0]*1,gps[1]*1,'wgs84');
          that.map.setCenter({lat: place.geometry.location.lat(), lng: place.geometry.location.lng()}, 19);
          that.address = place.formatted_address;
          that.position = {lat: gps[0] * 1, lng: gps[1] * 1};
        });
      },
      gps2address: function gps2address(pos) {
        let that = this;
        let geocoder = new google.maps.Geocoder;
        Indicator.open({text: "地址解析中...", spinnerType: "fading-circle"});
        geocoder.geocode({'location': pos}, function (results, status) {
          if (status === 'OK') {
            Indicator.close();
            if (results[1]) {
              let gps = [results[1].geometry.location.lat(), results[1].geometry.location.lng()];
              console.log("解析:", pos.lat + ',' + pos.lng, gps);
              let com = results[1].address_components;
              that.address = results[1].formatted_address;
              that.position = {lat: gps[0] * 1, lng: gps[1] * 1};
            } else {
              that.$danMessageBox("地址无法解析", Object, true);
            }
          }
        });
      },

      //地址信息传递录入
      showAddressMsg(){
        //判断是否存在值从而判断是否为修改方法
        if (this.$route.query.id != undefined) {
          //将数值添加至Vue存储的数据Data中
          let routerParams = this.$route.query.addressMsg;
          this.addressInfo.name = routerParams.name;
          this.addressInfo.mobile = routerParams.mobile;
          //this.address = routerParams.address;
          //获取路径地址中的门牌号，通过空格获取需截取的字段
          this.houseNumber = routerParams.address.substring(routerParams.address.indexOf(" "));
          //console.log("+++++++++"+ routerParams.address.substring(routerParams.address.indexOf(" ")));

          //尝试设置绝对坐标
          //坐标需转换为浮点数字，否则谷歌地图无法识别
          // let that = this;
          // that.position = {lat:routerParams.latitude,lng:routerParams.longitude};
           let pos = {
                     lat: parseFloat(routerParams.latitude),
                     lng: parseFloat(routerParams.longitude)
                   };

          //根据坐标创建地图，保证地图坐标与获取坐标对应
          //that.showMap(position);
          this.showPosition(pos);

        }else{
          console.log("++++添加方法，不做操作++++");
        }

      }
    },
    created() {
    },
    mounted() {
      this.$nextTick(() => {
        window.setTimeout(() => {
          this.initAutocomplete();
          if (this.$route.query.editType === 'add') {
            this.mapInit();
          } else {

          }
          // this.mapInit({lat:37.870290,lng:-122.266817});

          // this.showPosition({lat:37.870290,lng:-122.266817})
        }, 500)

          //利用mounted周期钩子函数迫使展示信息的方法执行
         this.showAddressMsg();
      });


    }
  }
</script>

<style scoped lang="less">
  @import "../../assets/css/common";

  .wrapper{
    background-color: white;
  }

  .content {
    .maps {
      height: 50vh;
      position: relative;
      overflow: hidden;

      #map {
        height: 100%;
        background: #f1efef;
      }

      .autocompleteInput {
        position: absolute;
        top: 10px;
        width: 100%;
        display: flex;
        justify-content: center;

        input {
          height: 36px;
          line-height: 36px;
          width: 92%;
          font-size: 16px;
          padding-left: 10px;
        }
      }

      .location {
        position: absolute;
        bottom: .8rem;
        left: 10px;
        height: 50px;
        width: 50px;

        img {
          width: 100%;
          height: 100%;
        }
      }

      .locIcon {
        position: absolute;
        top: 50%;
        width: 20px;
        left: 50%;

        img {
          width: 100%;
          height: 100%;
        }
      }
    }

    .input-item {
      display: flex;
      padding: 1rem;
      border-bottom: 1px solid #eeebeb;

      div {
        flex: 0.3;
        font-size: 14px;
      }

      input {
        background: white;
        flex: .7;
        border: 0;
      }
    }
  }


  .mint-radio-input:checked + .mint-radio-core {
    background-color: red !important;
    border-color: #26a2ff;
  }

  .edit-box {
    margin: 1rem;

    input {
      background: white;
    }

    .edit-item {
      display: flex;
      padding: 1rem;
      border-bottom: 1px solid #eeebeb;

      .select {

      }

      .mint-radiolist {
        position: relative;
        left: 1.5rem;
      }

      .address-info {
        display: flex;
        flex: .8;
        align-items: center;
        border: 0;
        font-size: 14px;
        background: white;

        div:nth-child(2) {
          position: relative;
          left: 10px;
        }
      }

      .get-address {
        /*flex:.4!important;*/
      }

      div:nth-child(1) {
        flex: .3;
        font-size: 14px;
      }

      div:nth-child(2) {
        display: flex;
      }

      input {
        flex: .8;
        border: 0;
      }

      .icon {
        width: 15px;
        height: 15px;
      }
    }

    .clear-padding {
      padding: 0;
    }
  }

  #address-detail {
    .btn {
      width: 80%;
      border: 1px solid #cccccc;
      margin: auto;
      padding: 10px 1rem;
      text-align: center;
      font-size: 1rem;
      border-radius: 3px;
    }

    .save-edit {
      background: #ED5B5B;
      color: white;
    }

    .remove-edit {
      margin-top: 10px;
      color: black;
    }

    .wrapper {
      height: calc(100vh - @common-header-height);
    }

    .content {

      @item-height: 38px;
      @border-height: 1px;

      .content-item {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
        margin-bottom: @space-width;
        height: @item-height;
        border: @border-height solid @primary-color;
        border-radius: 3px;
        background-color: white;

        .description {
          height: @item-height;
          .common-column-center;
          width: 25vw;
          padding-left: @space-width;
          font-size: 0.9rem;
          font-weight: bold;
          color: white;
          background-color: @primary-color;
        }

        .content-input {
          width: 75vw;
          border-radius: 3px;

          input {
            margin: 0;
            border: 0 solid white;
            cursor: pointer;
            font-size: 0.9rem;
            background-color: transparent;
            padding-left: @space-width;
            width: calc(100% - 10px);
            height: 38px;
          }

          select {
            height: 38px;
            background-color: transparent;
            border: 0;
            width: 100%;
            appearance: none;
            padding-left: @space-width;
          }
        }
      }
    }

    .operation {
      font-size: 1rem;
      margin-top: @space-width * 4;

      .operation-item {
        width: 100%;
        height: 38px;
        color: white;
        text-align: center;
        .common-center;
        border-radius: 3px;
        margin-bottom: @space-width;
      }

      .add {
        background-color: @primary-color;
      }

      .update {
        background-color: coral;
      }

      .delete {
        background-color: gray;
      }
    }
  }
</style>
