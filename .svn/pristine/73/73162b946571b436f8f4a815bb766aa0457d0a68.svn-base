<template>
  <div id="add-order">
    <common-header :back-handler="back" title="确认订单"></common-header>

    <div class="content" ref="wrapper2">
      <div class="order-info">
        <div class="info-item">
          <div class="title">
            <div class="name">外卖配送</div>
          </div>
          <div class="tool-item" @click="showAddress">
            <div class="left">
              <div class="icon">
                <svg class="icon pickUp-time" aria-hidden="true">
                  <use xlink:href="#icon-dingweixiao"></use>
                </svg>
              </div>
              <div class="tool-box" v-if="this.$store.getters.selectedAddress != null">
                <div class="tool-address">{{addressInfo.address}}</div>
                <div class="tool-info">
                  <span>{{addressInfo.name}}</span>
                  <span>{{addressInfo.mobile}}</span>
                </div>
              </div>
              <div class="tool-select-address" v-if="this.$store.getters.selectedAddress == null">请选择地址</div>
            </div>

            <div class="icon">
              <svg class="icon" aria-hidden="true">
                <use xlink:href="#icon-next"></use>
              </svg>
            </div>
          </div>
          <div class="tool-item" @click="showPicker">
            <div class="left">
              <!--<div class="time-icon icon"></div>-->
              <!--icon-shijian1-->
              <div class="icon">
                <svg class="icon pickUp-time" aria-hidden="true">
                  <use xlink:href="#icon-shijian1"></use>
                </svg>
              </div>
              <div class="pick-time" v-text="pickUpTime.type == 0 ? '立即送出' : '指定时间'">
              </div>
            </div>
            <div class="right">
              <span>大约{{pickUpTime.time}}配送</span>
              <svg class="icon" aria-hidden="true">
                <use xlink:href="#icon-next"></use>
              </svg>
            </div>
          </div>
        </div>
        <div class="info-item">
          <div class="title">
            <div class="name">订单详情</div>
          </div>
          <div class="goods-cell">
            <div class="goods-item" v-for="(item,index) in shopCarList">
              <div class="group-name">
                <p class="name">{{item.name}}</p>
                <p class="spec-list" v-if="item.specItemList && item.specItemList.length>0">
                  <span v-for="(itemSpec,i) of item.specItemList" :key="i">{{(i==0?'':'/')+itemSpec.name}}</span>
                </p>
              </div>
              <div class="group-count">x{{item.count}}</div>
              <div class="group-amount">${{appUtil.amountFormat(goodsTotalAmount(item))}}</div>
            </div>
          </div>
          <div class="cost-info">
            <div class="item">
              <p>小计</p>
              <p>${{goodsAll.total.toFixed(2)}}</p>
            </div>
            <div class="item" v-if="goodsAll.discountAmount > 0">
              <p>折扣金额({{this.$store.getters.discount * 10}}折)</p>
              <p>-${{goodsAll.discountAmount.toFixed(2)}}</p>
            </div>
            <div class="item" v-if="this.$store.getters.isStoreUser=='TRUE'&&this.$store.getters.openMembershipSystem=='TRUE'&&this.canDeductionAmount>0">
              <p>积分抵扣金额</p>
              <p class="">-${{canDeductionAmount.toFixed(2)}}</p>
            </div>
            <div class="item" v-if="this.$store.getters.isTax === 'TRUE'">
              <p>税费</p>
              <p class="">${{goodsAll.tax.toFixed(2)}}</p>
            </div>
            <div class="item" v-if="this.$store.getters.isTip === 'TRUE'">
              <p>小费</p>
              <p class="">${{appUtil.amountFormat(tipAmount)}}</p>
            </div>
            <div class="item" v-if="shippingFeeInfo.shippingFee > 0">
              <p>配送费</p>
              <p class="">${{appUtil.amountFormat(shippingFeeInfo.shippingFee)}}</p>
            </div>
          </div>
          <!--totalAmount.toFixed(2)-canDeductionAmount-->
          <div class="total">合计：<span class="price">{{appUtil.amountFormat(totalAmount.toFixed(2)-canDeductionAmount)}}</span>
          </div>
          <!--<div class="total">合计：<span class="price">{{totalAmount.toFixed(2)}}</span>
          </div>-->
        </div>

        <div class="info-item">
          <div class="mui-input-row">
            <label>备注</label>
            <input type="text" id="Js_remark" placeholder="请填写您的特殊需求" v-model="uRemark" @blur="appUtil.commonBlur()">
          </div>
        </div>
        <div class="info-item last-item" v-if="this.$store.getters.openMembershipSystem=='TRUE'&&this.$store.getters.isStoreUser=='TRUE'">
          <div class="cost-info" @click="inputIntegralPrompt">
            <div class="item">
              <div class="item-box">
                <span>会员积分抵扣</span>
                <!--<p style="color: #ED5B5B;font-size: 14px;">会员积分抵扣</p>-->
              </div>
              <p>
                <!--<img src="../../../static/img/integral.png" alt="">-->
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#icon-jifenmingxi"></use>
                </svg>
                <span class="integral-text">{{transIntegral(canDeductionAmount)}}(${{canDeductionAmount.toFixed(2)}})</span>
                <svg class="icon" aria-hidden="true">
                  <use xlink:href="#icon-next"></use>
                </svg>
              </p>
            </div>
          </div>
          <div class="cost-border">
            <div class="item">
              <div class="integral-item" style="color: black">
                <div>
                  <span>(当前积分</span>
                  <span :style="canDeductionAmount>0?'text-decoration: line-through;':''">{{$store.getters.storeScanGoodsUser.integral_number}}</span>)
                </div>
              </div>
              <div v-if="canDeductionAmount>0">
                <span style="float: left;">剩余积分:</span>
                <span>{{$store.getters.storeScanGoodsUser.integral_number-transIntegral(canDeductionAmount)}}</span>
              </div>
              <div class="consumption-info">
                您当前消费<span>${{appUtil.amountFormat(appUtil.amountSub(totalAmount.toFixed(2),canDeductionAmount))}}</span>,可获得 <span>{{consumptionBbtain(appUtil.amountFormat(appUtil.amountSub(totalAmount.toFixed(2),canDeductionAmount)))}}</span>积分
              </div>
            </div>
          </div>

        </div>
      </div>
    </div>


    <div class="to-pay">
      <div class="left">
        共<span class="count">{{goodsAll.count}}</span>份&nbsp;合计<span
        class="price">${{appUtil.amountFormat(totalAmount-canDeductionAmount)}}</span>
      </div>
      <div class="right" :class="isPaying ? 'disabled' : ''" @click="pay()">
        立即下单
      </div>
    </div>
    <loading v-if="isLoading" height="100vh" top="0px"></loading>


    <mt-popup v-model="pickerPopup" position="bottom" style="width: 100%;height: 40%">
      <div class="picker-box">
        <div class="picker-left">
          <div v-for="item in pickUpTimeDays" :class="pickUpDate === item ? 'active-picker' : ''"
               @click="pickUpDate = item">{{dateToText(item)}}
          </div>
        </div>
        <div class="list-box">
          <div class="list-today" v-for="item in pickUpTimes" @click="pickUpTime = item">
            <div v-text="item.type === 0 ? '立即送出' : item.time"></div>
            <div class="icon" :class=" item.time === pickUpTime.time ? 'icon-active' : ''"></div>
          </div>
        </div>
        <div class="popup-bottom">
          <div class="bottom-btn-box">
            <div @click="pickerPopup = false">取消</div>
            <div @click="pickerPopup = false">确认</div>
          </div>
        </div>
      </div>
    </mt-popup>

    <mt-popup v-model="tipPopupVisible" :closeOnClickModal="false" popup-transition="popup-fade" class="tip-popup"
              style="width:95%;background: rgba(255, 255, 255, 1);border-radius: 6px;"
              v-if="this.$store.getters.isTip == 'TRUE'">
      <tip :afterDiscountAmount="goodsAll.afterDiscountAmount"
           :tipInputVal="tipInputVal"
           :total="goodsAll.total"
           :tax="goodsAll.tax"
           @showTipKeyBord="showTipKeyBord" @saveTip="saveTip"></tip>
    </mt-popup>
    <mt-popup v-model="inputIntegralAlert" popup-transition="popup-fade" class="integra-popup" v-if="this.$store.getters.openMembershipSystem=='TRUE'&&this.$store.getters.isStoreUser=='TRUE'">
      <div class="mint-msgbox integra-box">
        <div class="mint-msgbox-header">
          <div class="mint-msgbox-title">提示</div>
        </div>
        <div class="mint-msgbox-content">
          <div class="mint-msgbox-message">
            <span>请输入需抵扣的积分</span>
            <br>
            <!--<div style="font-size: 12px;line-height: 17px;">-->
            <!--<span>当前积分兑换比例{{integralPortion}}</span>-->
            <!--</div>-->
            <span>您的积分为 <span style="font-weight: 600;">{{$store.getters.storeScanGoodsUser.integral_number}}</span> </span>
            最多可抵
            <span style="font-weight: 600;">$
                  <span
                    style="padding: 0 0px;">{{transPrice($store.getters.storeScanGoodsUser.integral_number).toFixed(2)}}</span>
                </span>
          </div>
          <p id="moneys" @click="toggleKeyborad()" style="font-size: 18px;">
            积分:&nbsp;
            <span id="price">{{integralInputVal}}</span>
            <span id="cursor" style="display: block;"></span>
          </p>
        </div>
        <div class="mint-msgbox-btns">
          <div class="mint-msgbox-btn mint-msgbox-cancel promiseBtn" style="color: black;"
               @click="alertClose('cancel')">取消
          </div>
          <div class="mint-msgbox-btn mint-msgbox-confirm promiseBtn" @click="alertClose('confirm');">
            确定
          </div>
        </div>
      </div>
    </mt-popup>
    <div class="integral-keyboard" v-if="this.$store.getters.openMembershipSystem=='TRUE'&&this.$store.getters.isStoreUser=='TRUE'">
      <table>
        <tbody>
        <tr>
          <td @click="integralKeyBordNum('1')">1</td>
          <td @click="integralKeyBordNum('2')">2</td>
          <td @click="integralKeyBordNum('3')">3</td>
          <td @click="integralKeyBordNum('D')" data-code="D" rowspan="2">
                          <span class="icon icon-del">
                              <svg data-v-7ef413f4 version="1.1" viewBox="0 0 48.4 36" class="svg-icon svg-fill">
                                  <path pid="0"
                                        d="M29.4 19.7l6.2 6.3 1.7-1.7-6.2-6.3 6.3-6.3-1.8-1.7-6.3 6.3-6.2-6.3-1.7 1.7 6.2 6.3-6.3 6.3 1.8 1.7 6.3-6.3zM39.9 3.2a5.3 5.3 0 0 1 5.4 5.3v19a5.3 5.3 0 0 1-5.4 5.3h-20a5.4 5.4 0 0 1-3.9-1.6L3.5 18.8a1 1 0 0 1 0-1.5L16 4.8a5.4 5.4 0 0 1 3.9-1.6h20zm0-3.2H20.7a8.6 8.6 0 0 0-6.2 2.6L1.3 15a4.2 4.2 0 0 0 0 6l13.3 12.4a8.6 8.6 0 0 0 6.1 2.6h19.2a8.5 8.5 0 0 0 8.5-8.5v-19A8.5 8.5 0 0 0 39.9 0z"></path>
                              </svg>
                          </span>
          </td>
        </tr>
        <tr>
          <td @click="integralKeyBordNum('4')">4</td>
          <td @click="integralKeyBordNum('5')">5</td>
          <td @click="integralKeyBordNum('6')">6</td>
        </tr>
        <tr>
          <td @click="integralKeyBordNum('7')">7</td>
          <td @click="integralKeyBordNum('8')">8</td>
          <td @click="integralKeyBordNum('9')">9</td>
          <!-- class="fobid"-->
          <td @click="integralKeyBordNum('K')" data-code="K" rowspan="2" id="JS_form_tip_finish">Ok</td>
        </tr>
        <tr>
          <!--<td @click="integralKeyBordNum('.')">.</td>-->
          <td @click="integralKeyBordNum('0')" colspan="3">0</td>
          <!--<td data-code="F" @click="integralKeyBordNum('F')">-->
          <!--<span class="icon icon-keyfold">-->
          <!--<svg data-v-7ef413f4 version="1.1" viewBox="0 0 48 48" class="svg-icon svg-fill">-->
          <!--<path pid="0"-->
          <!--d="M25.2 19.2H30v-4.8h-4.8v4.8zm1.2-12h-4.8V12h4.8V7.2zm-8.4 12h4.8v-4.8H18v4.8zm1.2-12h-4.8V12h4.8V7.2zM24 48l9.6-9.6H14.4L24 48zm9.6-40.8h-4.8V12h4.8V7.2zM13.2 26.4h21.6v-4.8H13.2v4.8zM12 7.2H7.2V12H12V7.2zm20.4 12h4.8v-4.8h-4.8v4.8zM36 12h4.8V7.2H36V12zm7.2-12H4.8A4.8 4.8 0 0 0 0 4.8v24a4.8 4.8 0 0 0 4.8 4.8h38.4a4.8 4.8 0 0 0 4.8-4.8v-24A4.8 4.8 0 0 0 43.2 0zm2.4 28.8a2.4 2.4 0 0 1-2.4 2.4H4.8a2.4 2.4 0 0 1-2.4-2.4v-24a2.4 2.4 0 0 1 2.4-2.4h38.4a2.4 2.4 0 0 1 2.4 2.4v24zm-30-14.4h-4.8v4.8h4.8v-4.8z"></path>-->
          <!--</svg>-->
          <!--</span>-->
          <!--</td>-->
        </tr>
        </tbody>
      </table>
    </div>
    <div class="modal-tips-keyboard" :class="keyBordStatus ? 'active' : ''">
      <table>
        <tbody>
        <tr>
          <td @click="keyBordNum('1')">1</td>
          <td @click="keyBordNum('2')">2</td>
          <td @click="keyBordNum('3')">3</td>
          <td @click="keyBordNum('D')" data-code="D" rowspan="2">
                          <span class="icon icon-del">
                              <svg data-v-7ef413f4 version="1.1" viewBox="0 0 48.4 36" class="svg-icon svg-fill">
                                  <path pid="0"
                                        d="M29.4 19.7l6.2 6.3 1.7-1.7-6.2-6.3 6.3-6.3-1.8-1.7-6.3 6.3-6.2-6.3-1.7 1.7 6.2 6.3-6.3 6.3 1.8 1.7 6.3-6.3zM39.9 3.2a5.3 5.3 0 0 1 5.4 5.3v19a5.3 5.3 0 0 1-5.4 5.3h-20a5.4 5.4 0 0 1-3.9-1.6L3.5 18.8a1 1 0 0 1 0-1.5L16 4.8a5.4 5.4 0 0 1 3.9-1.6h20zm0-3.2H20.7a8.6 8.6 0 0 0-6.2 2.6L1.3 15a4.2 4.2 0 0 0 0 6l13.3 12.4a8.6 8.6 0 0 0 6.1 2.6h19.2a8.5 8.5 0 0 0 8.5-8.5v-19A8.5 8.5 0 0 0 39.9 0z"></path>
                              </svg>
                          </span>
          </td>
        </tr>
        <tr>
          <td @click="keyBordNum('4')">4</td>
          <td @click="keyBordNum('5')">5</td>
          <td @click="keyBordNum('6')">6</td>
        </tr>
        <tr>
          <td @click="keyBordNum('7')">7</td>
          <td @click="keyBordNum('8')">8</td>
          <td @click="keyBordNum('9')">9</td>
          <!-- class="fobid"-->
          <td @click="keyBordNum('K')" data-code="K" rowspan="2" id="JS_form_tip_finish">Ok</td>
        </tr>
        <tr>
          <td @click="keyBordNum('.')">.</td>
          <td @click="keyBordNum('0')">0</td>
          <td data-code="F" @click="keyBordNum('F')">
                          <span class="icon icon-keyfold">
                              <svg data-v-7ef413f4 version="1.1" viewBox="0 0 48 48" class="svg-icon svg-fill">
                                  <path pid="0"
                                        d="M25.2 19.2H30v-4.8h-4.8v4.8zm1.2-12h-4.8V12h4.8V7.2zm-8.4 12h4.8v-4.8H18v4.8zm1.2-12h-4.8V12h4.8V7.2zM24 48l9.6-9.6H14.4L24 48zm9.6-40.8h-4.8V12h4.8V7.2zM13.2 26.4h21.6v-4.8H13.2v4.8zM12 7.2H7.2V12H12V7.2zm20.4 12h4.8v-4.8h-4.8v4.8zM36 12h4.8V7.2H36V12zm7.2-12H4.8A4.8 4.8 0 0 0 0 4.8v24a4.8 4.8 0 0 0 4.8 4.8h38.4a4.8 4.8 0 0 0 4.8-4.8v-24A4.8 4.8 0 0 0 43.2 0zm2.4 28.8a2.4 2.4 0 0 1-2.4 2.4H4.8a2.4 2.4 0 0 1-2.4-2.4v-24a2.4 2.4 0 0 1 2.4-2.4h38.4a2.4 2.4 0 0 1 2.4 2.4v24zm-30-14.4h-4.8v4.8h4.8v-4.8z"></path>
                              </svg>
                          </span>
          </td>
        </tr>
        </tbody>
      </table>
    </div>


  </div>
</template>

<script>
  import {MessageBox, Indicator} from "mint-ui"
  import CommonHeader from "../components/CommonHeader";
  import httpClient from '../http';
  import util from '../util';
  import tip from "./tip.vue";
  import Loading from "../components/Loading";
  import moment from "moment-timezone";
  import BScroll from 'better-scroll'

  export default {
    name: "AddOrder",
    components: {Loading, CommonHeader, tip},
    data: function () {
      return {
        isLoading: false,
        isPaying: false,
        pickerPopup: false,
        uRemark: '',
        pickUpDate: '',
        pickUpTime: {},
        //小费输入框
        tipInputVal: '',
        tipPopupVisible: true,
        shippingFeeInfo: {},
        totalAmount: 0,
        tipAmount: 0,
        scroll2: '',
        keyBordStatus: false,
        inputIntegralAlert: false,
        integralKeyboard: false,
        integralInputVal: '',
        canDeductionAmount: 0
      }
    },
    computed: {
      shopCarList: function () {
        return this.$store.getters.shopCartList;
      },
      addressInfo: function () {
        return this.$store.getters.selectedAddress;
      },
      goodsAll: function () {
        let count = 0;
        let total = 0;
        if (this.$store.getters.shopCartList !== null) {
          this.$store.getters.shopCartList.forEach(goods => {
            count += goods.count;
            total = util.amountAdd(total, this.goodsTotalAmount(goods));
          });
        }
        // let discountAmount = total - util.amountMul(total, this.$store.getters.discount);
        let discountAmount = total - util.round(util.amountMul(total, this.$store.getters.discount),2) ;
        let afterDiscountAmount = total - discountAmount;
        let tax = this.$store.getters.isTax === "TRUE" && this.$store.getters.isAfterDiscountTax === "TRUE" ? this.appUtil.amountMul(total, this.$store.getters.taxRate, 2) : this.$store.getters.isTax === "TRUE" && this.$store.getters.isAfterDiscountTax === "FALSE" ? this.appUtil.amountMul(afterDiscountAmount, this.$store.getters.taxRate, 2) : 0;
        return {
          count: count,
          total: util.amountHandle(total),
          discountAmount: discountAmount,
          afterDiscountAmount: afterDiscountAmount,
          tax: tax
        }
      },
      pickUpTimeDays: function () {
        let pickUpDate = [];
        for (let i = 0; i < 2; i++) {
          let date = moment().tz(this.$store.getters.timeZone).add(i, 'days').format("YYYY-MM-DD");
          pickUpDate.push(date);
        }
        this.pickUpDate = pickUpDate[0];
        return pickUpDate;
      },
      pickUpTimes: function () {
        let minutes = ["00", "10", "20", "30", "40", "50"];
        let nowTime = moment().tz(this.$store.getters.timeZone).format("YYYY-MM-DD");
        let nowHour = moment().tz(this.$store.getters.timeZone).format("HH:mm");
        let pickUpList = [];
        if (this.pickUpDate === nowTime) {
          pickUpList.push({time: nowHour, type: 0});
        }
        for (let i = 0; i <= 23; i++) {
          for (let j = 0; j < minutes.length; j++) {
            let time = (i < 10 ? "0" + i : i) + ":" + minutes[j];
            //当天
            if (this.pickUpDate === nowTime && nowHour > time) {
              continue;
            }
            pickUpList.push({time: time, type: 1});
          }
        }
        this.pickUpTime = pickUpList[0];
        return pickUpList;
      },

    },
    methods: {
      back() {
        this.$store.commit("selectedAddress", null);
        this.$router.replace({
          path: '/home/shoppingCart',
          name: 'ShoppingCart'
        });
      },
      dateToText(date) {
        let weekText = ['周一', '周二', '周三', '周四', '周五', '周六', '周天'];
        let weekValue = moment(date).format("E");
        let nowDate = moment().tz(this.$store.getters.timeZone).format("YYYY-MM-DD");
        let dateText = '';
        if (date == nowDate) {
          dateText = '今天'
        } else {
          dateText = '明天'
        }
        return dateText + "(" + weekText[weekValue - 1] + ")";
      },
      goodsTotalAmount(goods) {
        let singleProductRealAmount = util.amountAdd(util.round(util.amountMul(goods.amount, goods.discount), 2), goods.specAmount);
        return util.amountMul(singleProductRealAmount, goods.count);
      },
      pay() {
        if (this.isPaying) {
          return false;
        }
        console.log(this.addressInfo);
        if (this.addressInfo === '' || this.addressInfo == null) {
          MessageBox.alert("请选择地址").then(action => {
          });
          return false;
        }
        this.isPaying = true;
        if (this.$store.getters.clientType === '') {
          MessageBox.alert("请使用微信或支付宝客户端打开").then(action => {
          });
          return false;
        }
        Indicator.open({text: "正在加载中...", spinnerType: "fading-circle"});
        let goodsList = new Array();
        for (let item of this.shopCarList) {
          goodsList.push({
            goods_id: item.id,
            quantity: item.count,
            specificationInfoList: item.specItemList,
          });
        }
        let aliPayLoginUserId = "";
        let wxOpenid = "";
        if (this.appUtil.isWx()) {
          wxOpenid = this.$store.getters.userId;
        } else if (this.appUtil.isAli()) {
          aliPayLoginUserId = this.$store.getters.userId;
        }
        let tackOutTime = this.pickUpDate + " " + this.pickUpTime.time + ":" + "00";
        let body = {
          type: 4,
          alipay_login_userid: aliPayLoginUserId,
          wx_openid: wxOpenid,
          goodsOrderInfoList: goodsList,
          customer_name: this.addressInfo.name,
          customer_mobile: this.addressInfo.mobile,
          remark: this.uRemark,
          tack_out_time: this.appUtil.toTimeZone(tackOutTime, this.$store.getters.timeZone, 'UTC'),
          customer_address: this.addressInfo.address + this.addressInfo.houseNumber,
          latitude: this.addressInfo.latitude,
          longitude: this.addressInfo.longitude
        }
        let query = {
          store_id: this.$store.getters.storeId,
          store_menu_id: this.$store.getters.menuId,
        }
        if (this.$store.getters.isStoreUser === 'TRUE') {
          query.store_user_id = this.$store.getters.storeScanGoodsUser.id
        }
        httpClient.addOrder(this.qs.stringify(query), body).then(result => {
          if (result.data.result_code === "ok" && result.data.result_msg === "SUCCESS") {
            this.payment(result.data.goodsOrder.num, this.tipAmount, this.$store.getters.clientType === 'wechat' ? 'wechatpay' : 'alipay');
          } else {
            this.$danMessageBox("下单失败", undefined, true)
            Indicator.close();
            this.isPaying = false;
          }
        })
      },
      //支付
      payment(orderNum, tip, paytype) {
        let body, params;

        if (this.$store.getters.isStoreUser == "TRUE") {
          params = {
            store_user_id: this.$store.getters.storeScanGoodsUser.id,
            store_id: this.$store.getters.storeId
          }
          body = {
            deduction_integral: this.integralInputVal,
            num: orderNum,
            tip: tip
          }
        } else {
          params = {}
          body = {
            num: orderNum,
            tip: tip
          }
        }
        httpClient.addPayOrder(this.qs.stringify(params), body).then(result => {
          if (result.data.result_code == "ok" && result.data.result_msg == "SUCCESS") {
            httpClient.uniformPay(this.qs.stringify({
              transaction_id: result.data.merchantOrder.id,
              pay_type: paytype,
              wx_openid: this.$store.getters.userId,
              alipay_user_id: this.$store.getters.userId
            })).then(payResult => {
              if (payResult.data.result_code == "ok" && payResult.data.result_msg == "SUCCESS") {
                Indicator.close();
                this.isPaying = false;
                if (this.appUtil.isWx()) {
                  this.wxpay(payResult.data.appId, payResult.data.timeStamp, payResult.data.nonceStr, payResult.data.wechatPackage, payResult.data.signType, payResult.data.paySign, orderNum);
                } else if (this.appUtil.isAli()) {
                  this.alipay(payResult.data.trade_no, result.data.merchantOrder.id, orderNum);
                }
              } else {
                Indicator.close();
                this.isPaying = false;
                MessageBox.alert("支付失败").then(action => {
                });
              }
            })
          } else if (result.data.result_code == "error" && result.data.result_msg == "ORDER_PID") {
            Indicator.close();
            this.isPaying = false;
            MessageBox.alert("订单已完成或已被取消.").then(action => {
              if (this.appUtil.isWx()) {
                this.appUtil.closeWx();
              } else if (this.appUtil.isAli()) {
                this.appUtil.closeAli();
              } else {
                history.back();
              }
            });
          } else {
            Indicator.close();
            this.isPaying = false;
            MessageBox.alert("系统错误").then(action => {
            });
          }
        })
      },
      //微信支付
      wxpay(appId, timeStamp, nonceStr, wechatPackage, signType, paySign, orderNum) {
        let that = this;

        function onBridgeReady() {
          WeixinJSBridge.invoke(
            "getBrandWCPayRequest", {
              appId: appId, //公众号名称，由商户传入
              timeStamp: timeStamp, //时间戳，自1970年以来的秒数
              nonceStr: nonceStr, //随机串
              package: wechatPackage,
              signType: signType, //微信签名方式：
              paySign: paySign //微信签名
            },
            function (res) {
              if (res.err_msg == "get_brand_wcpay_request:ok") {
                that.$store.commit('shopCartList',null)
                that.$store.commit('selectedAddress',null)
                Indicator.close();
                that.$router.replace({
                  path: "/orderDetail",
                  query: {
                    orderNum: orderNum,
                    from: "fromOrderList"
                  }
                });
              } else if (res.err_msg == "get_brand_wcpay_request:cancel") {
                that.$store.commit('shopCartList',null)
                that.$store.commit('selectedAddress',null)
                //取消支付
                Indicator.close();
                that.isPaying = false;
                that.$router.replace({
                  path: "/orderDetail",
                  query: {
                    orderNum: orderNum,
                    from: "fromOrderList"
                  }
                });
              } else {
                //错误提示
                MessageBox.alert("支付失败").then(action => {
                });
                Indicator.close();
                that.isPaying = false;
              }
            }
          );
        }

        if (typeof WeixinJSBridge == "undefined") {
          if (document.addEventListener) {
            document.addEventListener("WeixinJSBridgeReady", onBridgeReady, false);
          } else if (document.attachEvent) {
            document.attachEvent("WeixinJSBridgeReady", onBridgeReady);
            document.attachEvent("onWeixinJSBridgeReady", onBridgeReady);
          }
        } else {
          onBridgeReady();
        }
      },
      //支付宝支付
      alipay(tradeNo, transactionId, orderNum) {
        let that = this;

        function ready(callback) {
          if (window.AlipayJSBridge) {
            callback && callback();
          } else {
            document.addEventListener("AlipayJSBridgeReady", callback, false);
          }
        }

        ready(function () {
          AlipayJSBridge.call(
            "tradePay", {
              tradeNO: tradeNo
            },
            function (alipayResult) {
              Indicator.close();
              Indicator.open({text: "正在跳转...", spinnerType: "fading-circle"});
              httpClient.queryOrder(that.qs.stringify({
                transaction_id: transactionId
              })).then(queryResult => {
                if (queryResult.data.result_code === "ok" && queryResult.data.result_msg === "SUCCESS") {

                  Indicator.close();
                  that.isPaying = false;
                  if (queryResult.data.tradeState === "TRADE_SUCCESS") { //跳转到支付成功页面
                    that.$store.commit('shopCartList',null)
                    that.$store.commit('selectedAddress',null)
                    that.$router.replace({
                      path: "/orderDetail",
                      query: {
                        orderNum: orderNum,
                        from: "fromOrderList"
                      }
                    });
                  } else if (queryResult.data.tradeState === "WAIT_BUYER_PAY") { //未支付   //USERPAYING
                    that.$store.commit('shopCartList',null)
                    that.$store.commit('selectedAddress',null)
                    that.$router.replace({
                      path: "/orderDetail",
                      query: {
                        orderNum: orderNum,
                        from: "fromOrderList"
                      }
                    });
                  } else if (queryResult.data.tradeState === "CLOSED") { //交易关闭
                    MessageBox.alert("当前订单已被关闭，请重新下单.").then(action => {
                      that.appUtil.closeAli();
                    });
                  } else if (queryResult.data.tradeState === "UNKNOWN") {
                    //结果未知
                    MessageBox.alert("支付结果未知，请查看支付宝账单.").then(action => {
                      that.appUtil.closeAli();
                    });
                    Indicator.close();
                    that.isPaying = false;
                  }
                } else {
                  //支付结果未知
                  MessageBox.alert("支付结果未知，请查看支付宝账单.").then(action => {
                    that.appUtil.closeAli();
                  });
                  Indicator.close();
                  that.isPaying = false;
                }
              })
            }
          );
        });
      },
      showPicker() {
        this.pickerPopup = true;
      },
      showAddress() {
        this.$router.replace({
          path: '/addressList',
          query: {
            path: 'addOrder',
            tip: this.tipAmount
          }
        })
      },
      //获取外送费用信息
      getShippingFeeInfo: function () {
        if (this.$store.getters.selectedAddress != null) {
          httpClient.getDistance(this.qs.stringify({
            scan_goods_user_address_id: this.$store.getters.selectedAddress.id,
            store_id: this.$store.getters.storeId
          })).then(result => {
            if (result.data.result_code === 'ok') {
              this.totalAmount = this.appUtil.amountAdd(this.totalAmount, result.data.shippingFee);
              this.shippingFeeInfo = result.data;
            }
          });
        }
      },
      //显示小费键盘
      showTipKeyBord(status) {
        let screenHeight = $(window).height();
        let keyBordHeight = screenHeight * 0.4; //键盘高度
        let inputHeight = $(".tip-input-val").position().top; //当前输入框距离父元素高度
        let tipModalHeight = $(".tip-popup").position().top; //当前弹框距离父元素高度
        let tipCellHeight = $(".tip-cell").position().top; //当前小费选择区域距离父元素高度
        if (inputHeight + tipModalHeight + tipCellHeight + 60 > screenHeight - keyBordHeight) {
          $(".tip-popup").css("margin-top", -((inputHeight + tipModalHeight + tipCellHeight + 60) - (screenHeight - keyBordHeight)) + "px");
        }
        this.keyBordStatus = status;
      },
      //保存小费
      saveTip(tipAmount) {
        this.tipAmount = tipAmount;
        this.totalAmount = this.totalAmount + this.tipAmount;
        this.tipPopupVisible = false;
      },
      //小费键盘事件
      keyBordNum(val) {
        let amountVal = this.tipInputVal.toString().trim();
        let _result = 0;
        let _code = val;
        if (_code === "K" || _code === "F") {
          //ok按钮  //隐藏键盘按钮
          _result = parseFloat(this.appUtil.clearNoNum(amountVal)).toFixed(2);
          _result == 0 ? (_result = "") : "";
          // 限额检测
          if (_result > 999.99) {
            return false;
          } else {
            $(".mint-popup").css("margin-top", 0 + "px");
            this.keyBordStatus = false;
          }
          this.tipInputVal = _result;
        } else {
          //删除按钮
          if (_code === "D") {
            if (amountVal.length == 1 || amountVal == "") {
              _result = "";
            } else {
              _result = amountVal.substring(0, amountVal.length - 1);
            }
          } else {
            //数字按钮
            if (_code === "." && amountVal.indexOf(".") >= 0) {
              return false;
            }
            if (amountVal.split(".").length < 2 && (this.appUtil.clearNoNum(amountVal) === "0.00" || parseFloat(this.appUtil.clearNoNum(amountVal)) == "0")) {
              if (_code === ".") {
                _result = "0" + _code;
              } else {
                _result = _code;
              }
            } else {
              let _amountValArray = amountVal.split(".");
              if (_amountValArray[0].length < 3) {
                _result = this.appUtil.clearNoNum(amountVal) + _code;
                _result = this.appUtil.clearNoNum(_result);
                if (_result.indexOf(".") < 0) {
                  _result = parseFloat(_result);
                }
              } else if (_amountValArray[0].length == 3) {
                let temp = this.appUtil.clearNoNum(amountVal) + _code;
                if (parseInt(temp) > parseInt(amountVal) || (_amountValArray.length == 2 && _amountValArray[1].length > 1)) {
                  _result = amountVal;
                } else {
                  _result = temp;
                }
              } else {
                _result = amountVal;
              }
            }
          }
          this.tipInputVal = _result;
        }
      },
      inputIntegralPrompt() {
        this.inputIntegralAlert = true;
      },
      //显示积分键盘修正alery的位置
      toggleKeyborad(value) {
        $('.integral-keyboard').hasClass('active') ? $('.integral-keyboard').removeClass('active') : $('.integral-keyboard').addClass('active')
        //    top: -15vw;
        if ($('.integral-keyboard').hasClass('active')) {
          $('.integra-box').css({
            'top': "-15vw"
          })
        } else {
          $('.integra-box').css({
            'top': ""
          })
        }
      },
      //关闭积分键盘修正alery的位置
      alertClose(value) {
        $('.integral-keyboard').hasClass('active') ? $('.integral-keyboard').removeClass('active') : ''
        this.inputIntegralAlert = false
        $('.integra-box').css({
          'top': ""
        })
        if (value == "confirm") {
          this.alertConfirm()
        }
      },
      //积分键盘事件
      integralKeyBordNum(val) {
        let amountVal = this.integralInputVal.toString().trim()
        let nowIntgral = this.$store.getters.storeScanGoodsUser.integral_number
        let _result = 0;
        if (val == "K") {
          this.alertConfirm()
          this.alertClose()
        } else if (val == "D") {
          if (amountVal.length == 1 || amountVal == "") {
            _result = "";
          } else {
            _result = amountVal.substring(0, amountVal.length - 1);
          }
          this.integralInputVal = _result
        } else {
          let value = this.integralInputVal
          value += val
          let _result = +(value)
          if (_result <= nowIntgral) {
            this.integralInputVal += val
          }
        }
      },
      //积分弹窗确认事件
      alertConfirm() {
        let inputVal = +(this.integralInputVal)                                            //输入的积分
        let maxDeductionIntegral = this.transIntegral(this.keepInt(this.totalAmount))      //最多可抵积分
        if (inputVal > this.$store.getters.storeScanGoodsUser.integral_number) {
          MessageBox.alert('您的积分不足')
          return
        }
        if (inputVal < maxDeductionIntegral) {
          this.canDeductionAmount = this.transPrice(inputVal)
          this.integralInputVal = this.transIntegral(this.canDeductionAmount)
        } else if (inputVal > maxDeductionIntegral) {
          this.canDeductionAmount = this.transPrice(maxDeductionIntegral)                   //抵扣的金额
          this.integralInputVal = maxDeductionIntegral
        } else if (inputVal == maxDeductionIntegral) {
          this.canDeductionAmount = this.totalAmount - 0.01
          this.integralInputVal = maxDeductionIntegral
        }
      },
      //传入金额转换成积分数
      transIntegral(value) {
        if (this.$store.getters.openMembershipSystem == "TRUE") {
          let integralArray = this.$store.getters.fromIntegralConvertRatio.split('/')
          let integral = (integralArray[0] * value).toFixed(0)
          return +(integral)
        }
      },
      //传入积分转换成金额
      transPrice(value) {
        if (this.$store.getters.openMembershipSystem == "TRUE") {
          let integralArray = this.$store.getters.fromIntegralConvertRatio.split('/')
          let price = (value / integralArray[0]).toString().split('.')[0]
          return +(price)
        }
      },
      //消费所获得的积分(小数部分向上取)
      consumptionBbtain(value){
        if (this.$store.getters.openMembershipSystem == "TRUE") {
          let priceArray = this.$store.getters.toIntegralConvertRatio.split('/')
          let price = (priceArray[1] * value).toFixed(2)
          return Math.round(price)
        }
      },
      //保留整数部分
      keepInt(value) {
        return value.toString().split('.')[0]
      },
    },
    created() {
      this.isLoading = true;
      if (this.$route.params.tipPopupVisible != null) {
        this.tipPopupVisible = this.$route.params.tipPopupVisible;
        this.tipAmount = this.$route.params.tip;
        this.totalAmount = this.appUtil.amountAdd(this.totalAmount, this.tipAmount);
      }
      this.totalAmount = this.appUtil.amountAdd(this.totalAmount, this.appUtil.amountAdd(this.goodsAll.afterDiscountAmount, this.goodsAll.tax));
      this.getShippingFeeInfo();
      window.setTimeout((result) => {
        this.isLoading = false;
      }, 500)
    },
    mounted() {
      this.scroll2 = new BScroll(this.$refs.wrapper2, {
        click: true,
        tap: true,
        bounce: false,
        mouseWheel: true,
      });
    },
    watch: {}
  }
</script>

<style scoped lang="less">
  @import "../assets/css/common";

  #add-order {
    .content {
      height: @primary-content-height;
      overflow: scroll;

      .order-info {
        background-image: linear-gradient(0deg, #efeff4, #efeff4 65%, hsla(0, 0%, 96%, .3) 75%, hsla(0, 0%, 96%, 0)), linear-gradient(270deg, #ed5b5b, #f16f6f);
        padding: 25px 5vw;

        .last-item {
          /*margin-bottom: 0 !important;*/
          /*padding-bottom: 0 !important;*/
          /*padding-top: 0 !important;*/

          .cost-info {
            border-top: 1px dashed #ece4e4;
            border-bottom: 1px dashed #ece4e4;

            .item {
              display: flex;
              justify-content: space-between;
              align-items: center;
              padding: 10px 0px;

              .item-box {
                display: flex;
                color: #ED5B5B;
                font-size: 13px;
              }

              p {
                display: flex;
                align-items: center;

                svg {
                  width: 15px;
                  height: 15px;
                }

                .integral-text {
                  padding: 0 7px;
                  letter-spacing: .5px;
                }
              }

            }
          }

          .cost-border {
            border-bottom: 1px dashed #ece4e4 !important;

            .item {
              font-size: 14px;
              padding: 10px 0px;

              .consumption-info {
                font-size: 12px;

                span {
                  font-size: 13px;
                  font-weight: 600;
                  color: red;
                }
              }
            }
          }
        }

        .info-item {
          background: #ffffff;
          border-radius: 5px;
          padding: 1rem 5vw;
          margin-bottom: 1.5rem;

          .tool-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 14px 0;
            font-size: 14px;
            border-bottom: 1px dashed #cccccc;

            svg {
              width: 20px;
              height: 20px;
            }

            .left {
              display: flex;
              align-items: center;

              .icon {
                margin-right: 0.5rem;
              }

              .tool-box {
                padding: 0 0.8rem;
              }

              .time-icon {
                background: url(../assets/img/time.png) no-repeat;
                width: 20px;
                height: 20px;
                background-size: 100%;
              }
            }

            .right {
              display: flex;
              align-items: center;
            }

          }

          :last-child {
            padding-bottom: 0;
            border-bottom: 0;
          }

          .title {
            width: 100%;
            display: flex;
            justify-content: space-between;
            -webkit-align-items: center;
            align-items: center;
            padding-bottom: 1rem;
            border-bottom: 1px dashed #ece4e4;
            font-size: 14px;

            .name {
              font-weight: bold;
            }
          }

          .goods-cell {
            width: 100%;
            position: relative;
            overflow: hidden;
            border-bottom: 1px dashed #ece4e4;
            font-size: 14px;
            padding-top: 1rem;

            .goods-item {
              display: flex;
              align-items: center;
              width: 100%;
              padding-bottom: 1rem;


              .group-name {
                overflow: hidden;
                -webkit-box-flex: 6;
                flex: 6;

                .name {
                  color: #000;
                  margin: 0;
                }

                .spec-list {
                  font-size: 12px;
                }
              }

              .group-count {
                -webkit-box-flex: 1;
                flex: 1;
                text-align: right;
              }

              .group-amount {
                -webkit-box-flex: 3;
                flex: 3;
                text-align: right;
              }
            }
          }

          .cost-info {
            border-bottom: 1px dashed #ece4e4;

            .item {
              display: flex;
              justify-content: space-between;
              -webkit-align-items: center;
              align-items: center;
              padding: 8px 0px;

              p {
                color: #000;
                font-size: 14px;
                margin: 0;
              }
            }
          }

          .total {
            text-align: right;
            font-size: 16px;
            font-weight: 600;
            padding: 10px 0px;
          }

          .mui-input-row {
            height: 50px;
            position: relative;
            clear: left;
            overflow: hidden;

            label {
              padding: 16px 0px;
              width: 30%;
              font-size: 14px;
              font-weight: bold;
              color: #565656;
              line-height: 1.1;
              float: left;
            }

            input {
              height: 50px;
              text-align: right;
              font-size: 14px;
              float: right;
              width: 65%;
              margin-bottom: 0;
              padding-left: 0;
              border: 0;
            }
          }

        }


      }
    }

    .integral-keyboard {
      position: fixed;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 100;
      font-size: 24px;
      line-height: 24px;
      background: #f6f6f6;
      color: #4a4a4a;
      width: 100%;
      height: 40%;
      user-select: none;
      transition-property: transform visibility;
      transition-duration: 0.6s;
      font-weight: 300;
      border-top: 1px solid #e5e5e5;
      visibility: hidden;
      transform: translate3d(0, 100%, 0);
      z-index: 999999999;

      table {
        width: 100%;
        height: 100%;
        border-collapse: collapse;
        table-layout: fixed;

        td {
          text-align: center;
          width: 33.33%;
          border: 1px solid #ddd;

          .svg-fill {
            font-size: 20px;
            width: 1em;
            height: 1em;
            vertical-align: -0.15em;
          }
        }

        td:first-child {
          border-left: none;
        }

        td:nth-of-type(-n + 3) {
          font-weight: 600;
        }
      }

      .active {
        visibility: visible;
        transform: translateZ(0);
      }

      #JS_form_tip_finish {
        font-size: 20px;
        background: #ed5b5b;
        color: #ddd;
      }

    }

    .integra-popup {
      width: 100%;
      top: 45%;

      @keyframes shining {
        0% {
          opacity: 0;
        }

        50% {
          opacity: 0;
        }

        50.1% {
          opacity: 1;
        }

        100% {
          opacity: 1;
        }
      }

      #price {
        float: right;
      }

      #cursor {
        width: 1px;
        height: 45px;
        border-right: 1px solid #000;
        animation: shining 1s linear infinite;
        position: absolute;
        top: 12px;
        right: 0;
        display: none;
      }

      .promiseBtn {
        text-align: center;
        font-size: 14px;
        line-height: 40px;
      }

      #moneys {
        border-bottom: 1px solid #eee;
        margin: 0 !important;
        line-height: 3.5rem;
        font-size: 24px;
        text-align: left;
        background-color: #fff;
        position: relative;
        margin: 13px 0;
      }

    }

    .to-pay {
      height: @common-navigation-bar-height;
      display: flex;
      flex-direction: row;
      align-items: center;

      @button-width: 98px;

      .left {
        width: calc(100vw - @button-width);
        height: 50px;
        background-color: white;
        .common-column-center;
        padding-left: @space-width;
        font-size: 14px;

        .count {
          font-size: 16px;
          font-weight: 500;
          color: rgba(237, 91, 91, 1);
          padding: 0 5px;
        }

        .price {
          font-size: 16px;
          font-weight: 500;
          color: rgba(237, 91, 91, 1);
          padding: 0 5px;
        }
      }

      .right {
        width: @button-width;
        height: 50px;
        background-color: @primary-color;
        color: white;

        .common-center;
      }

      .disabled {
        background-color: @primary-disable-color;
        color: @primary-disable-light-color;
      }
    }

    .picker-box {
      display: flex;
      padding-top: 0;

      .picker-left {
        div {
          height: 40px;
          line-height: 40px;
          border-bottom: 1px solid #e1e0e0;
          flex: 1;
          color: #cccccc;
          padding: 0px 1rem;
          font-size: 14px;

        }

        .active-picker {
          color: #787676 !important;
          font-weight: 600;
        }
      }

      .list-box {
        flex: 1;
        height: calc(40vh - 40px);
        overflow: auto;
        overflow-x: hidden;
        padding-left: 1rem;

        .list-today {
          height: 40px;
          line-height: 40px;
          display: flex;
          justify-content: space-between;

          .icon {
            height: 40px;
            width: 20px;
          }

          .icon-active {
            position: relative;
            right: .8rem;
            background: url("../assets/img/success-active.png") center no-repeat;
            background-size: 100%;
          }
        }
      }

      .popup-bottom {
        position: fixed;
        bottom: 0;
        width: 100%;

        .bottom-btn-box {
          display: flex;
          text-align: center;
          background: #fff;

          div {
            width: 50%;
            height: 40px;
            line-height: 40px;
            border-top: 1px solid #babaf1;
            border-right: 1px solid #babaf1;
            font-size: 14px;
          }
        }
      }
    }

    /*键盘样式*/

    .modal-tips-keyboard {
      position: fixed;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 100;
      font-size: 24px;
      line-height: 24px;
      background: #f6f6f6;
      color: #4a4a4a;
      width: 100%;
      height: 40%;
      user-select: none;
      transition-property: transform visibility;
      transition-duration: 0.6s;
      font-weight: 300;
      border-top: 1px solid #e5e5e5;
      visibility: hidden;
      transform: translate3d(0, 100%, 0);
      z-index: 999999999;

      table {
        width: 100%;
        height: 100%;
        border-collapse: collapse;
        table-layout: fixed;

        td:first-child {
          border-left: none;
        }

        td:nth-of-type(-n + 3) {
          font-weight: 600;
        }

        td {
          text-align: center;
          width: 33.33%;
          border: 1px solid #ddd;
        }

        .icon {
          font-size: 12px;

          svg {
            width: 18px;
            height: 18px;
          }
        }

        td[data-code="K"] {
          font-size: 20px;
          background: #ed5b5b;
          color: #ddd;
        }
      }
    }

    .active {
      visibility: visible;
      transform: translateZ(0);
    }


  }

</style>
